/*  This file is part of vtrace.
    vtrace is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.
    vtrace is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with vtrace. If not, see <https://www.gnu.org/licenses/>.  */

#version 460 core

#define PI 3.1415926535
#define SQRT_2 1.4142135624
#define CAM_DIST 250.0

#define SKY_COLOR vec3(0.3, 0.3, 0.3)

#define MAX_ITER 200

#define CHUNK_WIDTH 32
#define CHUNK_SIZE (CHUNK_WIDTH * CHUNK_WIDTH * CHUNK_WIDTH)

#define REFLECT_PROB 0.7

#define PHONG 32.0

#define VOLUMETRIC_COEFF 0.01

#define RAYS_PER_PIXEL 2

#define BLENDING 0.95

layout(local_size_x = 8, local_size_y = 8) in;
layout(binding = 0, rgba8) writeonly uniform image2D frag_color;
layout(binding = 1, rgba8) writeonly uniform image2D bright_color;
layout(binding = 2, rgba8) uniform image2D prev_frag_color;
layout(binding = 3, rgba8) uniform image2D prev_bright_color;
layout(binding = 4) buffer chunk {
    uint _num_nodes;
    uint _svo[];
};

uniform vec3 camera_loc;
uniform vec2 camera_rot;

uniform uint rand;
uniform uint blend;

uint hash(uint x) {
    x += x << 10u;
    x ^= x >>  6u;
    x += x <<  3u;
    x ^= x >> 11u;
    x += x << 15u;
    return x;
}

float randf(uint x) {
    uint h = hash(x);
    return float(h & uint(0x00FFFFFF)) / float(0x00FFFFFF);
}

mat3 rotation_mat(vec3 axis, float angle) {
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);
}

uint query_svo_helper(uint x, uint y, uint z, uint w, out uint fw, uint pos, bool leaf) {
    while (w > 0) {
	if (leaf) return _svo[pos]; 
	
	bool bx = x < w / 2;
	bool by = y < w / 2;
	bool bz = z < w / 2;
	uint rx = bx ? x : x - w / 2;
	uint ry = by ? y : y - w / 2;
	uint rz = bz ? z : z - w / 2;
	uint bit = uint(7 - (uint(bx) | (uint(by) << 1) | (uint(bz) << 2)));
	uint mask = 0x80 >> bit;
	
	uint valid_mask = (_svo[pos] & 0x00FF0000u) >> 16;
	uint leaf_mask = (_svo[pos] & 0xFF000000u) >> 24;
	if ((valid_mask & mask) != 0) {
	    mask = valid_mask;
	    uint count = 0;
	    for (uint i = 0; i < bit; ++i) {
		count += (mask >> (7 - i)) & 1u;
	    }
	    uint child = (_svo[pos] & 0x0000FFFFu) + count;
	    x = rx;
	    y = ry;
	    z = rz;
	    w /= 2;
	    fw = w;
	    pos = child;
	    leaf = (leaf_mask & mask) != 0;
	}
	else {
	    break;
	}
    }
    return 0;
}

uint query_svo(uint x, uint y, uint z, uint w, out uint fw) {
    fw = w;
    return query_svo_helper(x, y, z, w, fw, _num_nodes - 1, false);
}

uint get_voxel(ivec3 pos, out uint fw) {
    if (bool(int(pos.x < 0) |
	     int(pos.y < 0) |
	     int(pos.z < 0) |
	     int(pos.x >= CHUNK_WIDTH) |
	     int(pos.y >= CHUNK_WIDTH) |
	     int(pos.z >= CHUNK_WIDTH))) {
	fw = CHUNK_WIDTH;
	return 0;
    }
    return query_svo(pos.x, pos.y, pos.z, CHUNK_WIDTH, fw);
}

float traverse(inout vec3 ray_pos, vec3 ray_dir, out uint voxel, out bvec3 mask, inout uint iters, inout uint last_fw) {
    vec3 delta_dist = 1.0 / ray_dir;
    vec3 adj_ray_pos = ray_pos / float(last_fw);
    vec3 t_forward = (ceil(adj_ray_pos) - adj_ray_pos) * delta_dist;
    vec3 t_backward = (floor(adj_ray_pos) - adj_ray_pos) * delta_dist;
    vec3 pos_t = max(t_forward, t_backward);
    mask = lessThanEqual(pos_t.xyz, min(pos_t.yzx, pos_t.zxy));
    float t = last_fw * min(pos_t.x, min(pos_t.y, pos_t.z)) + 0.001;
    ray_pos += t * ray_dir;
    iters += last_fw;
    voxel = get_voxel(ivec3(floor(ray_pos)), last_fw);
    return t;
}

void main() {
    const ivec2 image_dims = imageSize(frag_color);
    const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    const mat3 camera_rot_mat = mat3(cos(camera_rot[0]), 0.0, sin(camera_rot[0]), 0.0, 1.0, 0.0, -sin(camera_rot[0]), 0.0, cos(camera_rot[0])) * mat3(1.0, 0.0, 0.0, 0.0, cos(camera_rot[1]), -sin(camera_rot[1]), 0.0, sin(camera_rot[1]), cos(camera_rot[1]));
    const vec3 init_ray_dir = normalize(camera_rot_mat * vec3(pixel_coords.x - image_dims.x / 2 + 0.0000001, pixel_coords.y - image_dims.y / 2 + 0.0000001, CAM_DIST));
    const vec3 init_ray_pos = camera_loc;

    const vec3 init_hit = vec3(1.0, 1.0, 1.0);
    const uint init_iter = 0;
    const float init_hit_light = 0.0;
    const float init_total_dist = 0.0;
    const float init_in_flight = 1.0;

    vec3 accum = vec3(0.0, 0.0, 0.0);
    vec3 accum_light = vec3(0.0, 0.0, 0.0);

    for (uint ray_num = 0; ray_num < RAYS_PER_PIXEL; ++ray_num) {
	vec3 ray_dir = init_ray_dir;
	vec3 ray_pos = init_ray_pos;

	vec3 hit = init_hit;
	uint iter = init_iter;
	float hit_light = init_hit_light;
	float total_dist = init_total_dist;
	float in_flight = init_in_flight;

	uint last_fw = 1;
	while (iter < MAX_ITER) {
	    uint voxel;
	    bvec3 mask;
	    total_dist += traverse(ray_pos, ray_dir, voxel, mask, iter, last_fw);
	    if (voxel != 0) {
		vec3 voxel_color = vec3(
					float(voxel >> 24) / 255.0,
					float((voxel >> 16) & 0x000000FFu) / 255.0,
					float((voxel >> 8) & 0x000000FFu) / 255.0
					);
		ray_dir *= -2.0 * vec3(mask) + 1.0;

		uint hash = rand * (hash(gl_GlobalInvocationID.x) + hash(gl_GlobalInvocationID.y * 3) + hash(gl_GlobalInvocationID.z * 5) + ray_num + iter + uint(pixel_coords.x) + uint(pixel_coords.y));
		float spec_z = randf(hash);
		float alpha = acos(pow(spec_z, 1.0 / (PHONG + 1.0)));
		float phi = 2.0 * PI * randf(hash * 7);
		ray_dir = rotation_mat(ray_dir, phi) * rotation_mat(cross(ray_dir, vec3(0.0, 1.0, 0.0)), alpha) * ray_dir;

		if ((voxel & 0x00000001u) != 0) {
		    vec3 new_hit = voxel_color;
		    hit *= new_hit;
		    hit_light = 1.0;
		    in_flight = 0.0;
		    break;
		}
		else if (randf(hash * 17) < REFLECT_PROB) {
		    hit *= abs(dot(ray_dir, vec3(mask)));
		}
		else {
		    vec3 new_hit = voxel_color * SKY_COLOR;
		    hit *= new_hit;
		    in_flight = 0.0;
		    break;
		}
	    }
	}
	
	hit *= SKY_COLOR * in_flight + vec3(1.0 - in_flight);

	const float scattering = exp(-total_dist * VOLUMETRIC_COEFF);
	hit = hit * scattering + SKY_COLOR * (1.0 - scattering);

	accum += hit;
	accum_light += hit * hit_light;
    }

    const vec4 prev_frag_color_pixel = imageLoad(prev_frag_color, pixel_coords);
    const vec4 prev_bright_color_pixel = imageLoad(prev_bright_color, pixel_coords);

    const float blend_factor = BLENDING * float(1 - blend);
    const vec4 new_frag_color_pixel = blend_factor * prev_frag_color_pixel + (1.0 - blend_factor) * vec4(accum / float(RAYS_PER_PIXEL), 1.0);
    const vec4 new_bright_color_pixel = blend_factor * prev_bright_color_pixel + (1.0 - blend_factor) * vec4(accum_light / float(RAYS_PER_PIXEL), 1.0);

    imageStore(frag_color, pixel_coords, new_frag_color_pixel);
    imageStore(prev_frag_color, pixel_coords, new_frag_color_pixel);

    imageStore(bright_color, pixel_coords, new_bright_color_pixel);
    imageStore(prev_bright_color, pixel_coords, new_bright_color_pixel);
}
